merge_topics:
  response_mime_type: application/json

  system_instruction: >
    Você receberá **uma lista de objetos em JSON** (cada um seguindo o formato descrito no prompt "create_topics"). Cada JSON conterá um campo `"topics"`, que é um array de objetos com esta estrutura:

    ```json
    {
      "topics": [
        {
          "topic": "Título ou nome do capítulo/subcapítulo",
          "sub_topics": [
            "Conceito-chave aprofundado em texto corrido",
            "Conceito-chave aprofundado em texto corrido"
          ]
        },
        ...
      ]
    }
    ```

    Seu objetivo é **mesclar** todos esses JSONs em um **único** JSON **válido**, mantendo a **ordem lógica** dos tópicos e sub-tópicos, sem perder conteúdo. Caso existam capítulos ou subcapítulos duplicados (mesmo título ou tema equivalente), eles devem ser unificados em **uma única entrada** dentro de `"topics"` e seus `"sub_topics"` devem ser combinados de forma orgânica, **sem redundâncias**. Caso seja necessário renomear ou ajustar algum título de capítulo/subcapítulo para harmonizar a sequência lógica, faça-o, mas garanta que o conteúdo seja preservado.

    ### Diretrizes para a fusão:
    1. **Combinação de tópicos**  
       - Se dois ou mais JSONs tiverem um capítulo ou subcapítulo com título igual ou equivalente (por exemplo, "Redes Neurais" e "1.1 Redes Neurais" ou "Fundamentos de Redes Neurais"), considere-os como o mesmo tópico.  
       - Unifique os conteúdos de `"sub_topics"` de forma a não perder informações. Evite repetições exatas de texto; se necessário, mescle ou concilie frases semelhantes.  

    2. **Ordem e hierarquia**  
       - Mantenha a sequência ou hierarquia dos capítulos/subcapítulos de forma coerente:  
         * Capítulos mais gerais devem vir antes de capítulos mais específicos ou aprofundados.  
         * Subcapítulos devem manter sua relação de "detalhamento" em relação ao capítulo.  
       - Se houver títulos que conflitam em nível hierárquico (por exemplo, “2.3” em um JSON e “2.1.3” em outro), unifique-os apenas se fizer sentido; do contrário, crie tópicos separados, mas mantendo a coerência de organização.  
       - Ajuste a numeração ou prefixos (como “1.”, “1.1”) apenas quando necessário para manter uma progressão lógica.

    3. **Mesclando sub-tópicos**  
       - Para cada tópico unificado, combine as listas de `"sub_topics"` de forma orgânica.  
       - Se houver subtópicos idênticos em texto, mantenha apenas um.  
       - Se houver subtópicos muito semelhantes, mescle-os em um texto único que represente ambos os conteúdos de forma clara e abrangente.  
       - Preserve todos os detalhes técnicos, definições, exemplos, relações e discussões de cada subtópico.

    4. **Saída Final**  
       - **Retorne somente o JSON** resultante, sem texto adicional.  
       - Assegure-se de que o JSON seja **válido** e respeite o seguinte schema, já utilizado no prompt "create_topics":

       ```json
       {
         "type": "object",
         "properties": {
           "topics": {
             "type": "array",
             "items": {
               "type": "object",
               "properties": {
                 "topic": {
                   "type": "string"
                 },
                 "sub_topics": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "required": [
                 "topic",
                 "sub_topics"
               ]
             }
           }
         },
         "required": [
           "topics"
         ]
       }
       ```

    Em resumo: você deve unir todas as estruturas de `"topics"` em uma única, removendo duplicações e sobreposições de conteúdo, mas sem perder nenhum detalhe relevante. Ajuste títulos e sub-tópicos, se necessário, para manter coerência e progressão lógica.
    
  user_message: >
    Please merge all the provided JSON structures into a single coherent structure:

    {content}

    Remember to:
    1. Maintain logical order and hierarchy
    2. Combine duplicate topics
    3. Preserve all unique content
    4. Ensure JSON validity
    5. Make sure that the generated json has only one topics field
